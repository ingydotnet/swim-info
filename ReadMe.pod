=pod

=for comment
DO NOT EDIT. This Pod was generated by Swim.
See http://github.com/ingydotnet/swim-pm#readme

=encoding utf8

=head1 Swim - See What I Mean?!

This is a basic Info doc for the Swim markup language.

Swim is a new text markup language in the line of Markdown and wiki markups.
It's goals are:

=over

=item * Superset of all common markup models

=item * Generate other markups: HTML, Markdown, Pod, ReST, nroff(manpage)

=item * Generate binary: MSWord, PDF, DVI

=item * Best-of syntax for most common things

=item * Generic extension syntax for other stuff

=item * More nestable than typical markups

=over

=item * ie things like Lists of tables of code

=back

=item * Defined by a nice top-down PEG (grammar)

=item * (Identical) Implementations in (at least) Perl, Ruby, JavaScript

=item * Plugin architecture to support more extravagant things

=item * Support various domains including:

=over

=item * Documentation

=item * Blogs

=item * Articles

=item * Books

=back

=back

This document is a very high level overview, with pointer to more info:

=head2 Swim in the Wild

Here are some rather complex Swim documents in the wild (with output in Pod
for viewing on GitHub):

=over

=item * L<https://github.com/ingydotnet/git-hub/blob/master/doc/git-hub.swim>

=over

=item * L<https://github.com/ingydotnet/git-hub#readme>

=back

=item * L<https://github.com/ingydotnet/swim-pm/blob/master/doc/Swim.swim>

=over

=item * L<https://github.com/ingydotnet/swim-pm#readme>

=back

=back

I'll add more soon.

=head2 Extension Markup

Simple things like B<bold> I<italic> _underline_ C<--strike--> and
C<code> are done:

    Simple things like *bold* /italic/ _underline_ --strike-- and `code` are done:

There is also a generic syntax that these things and more can be done with:

    <name arguments go here>

For instance this:

=for html
<a href="https://travis-ci.org/ingydotnet/yaml-pm"><img src="https://travis-ci.org/ingydotnet/yaml-pm.png" alt="yaml-pm"></a>
<a href="https://coveralls.io/r/ingydotnet/yaml-pm?branch=master"><img src="https://coveralls.io/repos/ingydotnet/yaml-pm/badge.png" alt="yaml-pm"></a>

is made with:

    <badge travis coveralls ingydotnet/yaml-pm>

Also things like <bold bold text> can be done explicitly:

    Also things like <bold bold text> can be done explicitly:

The I<block> extension syntax is:

    <<< name arguments go here
    text for extension
    >>>

This is in keeping with various 1 to 3 syntaxes out there like:

    Some `code`:

    ```
    some code
    ```

=head2 Plugins

The main Swim implementation is:

=over

=item * L<https://metacpan.org/release/Swim>

=back

And the one plugin so far is:

=over

=item * L<https://metacpan.org/release/Swim-Plugin-badge>

=back

=head2 The Swim Grammar

Swim is defined by a Pegex (PEG) grammar here:

=over

=item * L<https://github.com/ingydotnet/swim-pgx/blob/master/swim.pgx>

=back

This affords:

=over

=item * Pegex can more easily be implemented in several languages

=item * New features can be added in one place

=item * Bugs can be fixed in one place

=back

=head2 Of Interest

The markup for multiple blank line is...

multiple blank lines!

=cut
